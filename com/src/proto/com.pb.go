// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: com.proto

package com

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AckNak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AckNak) Reset() {
	*x = AckNak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNak) ProtoMessage() {}

func (x *AckNak) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNak.ProtoReflect.Descriptor instead.
func (*AckNak) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{0}
}

func (x *AckNak) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Meta string `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	Time int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Request) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Request) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *Request) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Meta        string `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Result      string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Data        []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestTime int64  `protobuf:"varint,5,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	Time        int64  `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *Response) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *Response) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Response) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Response) GetRequestTime() int64 {
	if x != nil {
		return x.RequestTime
	}
	return 0
}

func (x *Response) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_com_proto protoreflect.FileDescriptor

var file_com_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x6f, 0x6d,
	0x22, 0x1c, 0x0a, 0x06, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x55,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x3f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0x3c, 0x0a, 0x06, 0x44, 0x75, 0x70,
	0x6c, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x36, 0x0a, 0x0d, 0x41, 0x63, 0x6b, 0x4e, 0x61,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x6b,
	0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x6b, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_proto_rawDescOnce sync.Once
	file_com_proto_rawDescData = file_com_proto_rawDesc
)

func file_com_proto_rawDescGZIP() []byte {
	file_com_proto_rawDescOnce.Do(func() {
		file_com_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_proto_rawDescData)
	})
	return file_com_proto_rawDescData
}

var file_com_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_proto_goTypes = []interface{}{
	(*AckNak)(nil),   // 0: com.AckNak
	(*Request)(nil),  // 1: com.Request
	(*Response)(nil), // 2: com.Response
}
var file_com_proto_depIdxs = []int32{
	1, // 0: com.StreamService.SendRequest:input_type -> com.Request
	1, // 1: com.Duplex.StreamRequest:input_type -> com.Request
	0, // 2: com.AckNakService.Healthy:input_type -> com.AckNak
	2, // 3: com.StreamService.SendRequest:output_type -> com.Response
	2, // 4: com.Duplex.StreamRequest:output_type -> com.Response
	0, // 5: com.AckNakService.Healthy:output_type -> com.AckNak
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_com_proto_init() }
func file_com_proto_init() {
	if File_com_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_com_proto_goTypes,
		DependencyIndexes: file_com_proto_depIdxs,
		MessageInfos:      file_com_proto_msgTypes,
	}.Build()
	File_com_proto = out.File
	file_com_proto_rawDesc = nil
	file_com_proto_goTypes = nil
	file_com_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (StreamService_SendRequestClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (StreamService_SendRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/com.StreamService/SendRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceSendRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_SendRequestClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type streamServiceSendRequestClient struct {
	grpc.ClientStream
}

func (x *streamServiceSendRequestClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	SendRequest(*Request, StreamService_SendRequestServer) error
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) SendRequest(*Request, StreamService_SendRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_SendRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).SendRequest(m, &streamServiceSendRequestServer{stream})
}

type StreamService_SendRequestServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type streamServiceSendRequestServer struct {
	grpc.ServerStream
}

func (x *streamServiceSendRequestServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendRequest",
			Handler:       _StreamService_SendRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com.proto",
}

// DuplexClient is the client API for Duplex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DuplexClient interface {
	StreamRequest(ctx context.Context, opts ...grpc.CallOption) (Duplex_StreamRequestClient, error)
}

type duplexClient struct {
	cc grpc.ClientConnInterface
}

func NewDuplexClient(cc grpc.ClientConnInterface) DuplexClient {
	return &duplexClient{cc}
}

func (c *duplexClient) StreamRequest(ctx context.Context, opts ...grpc.CallOption) (Duplex_StreamRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Duplex_serviceDesc.Streams[0], "/com.Duplex/StreamRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &duplexStreamRequestClient{stream}
	return x, nil
}

type Duplex_StreamRequestClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type duplexStreamRequestClient struct {
	grpc.ClientStream
}

func (x *duplexStreamRequestClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *duplexStreamRequestClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DuplexServer is the server API for Duplex service.
type DuplexServer interface {
	StreamRequest(Duplex_StreamRequestServer) error
}

// UnimplementedDuplexServer can be embedded to have forward compatible implementations.
type UnimplementedDuplexServer struct {
}

func (*UnimplementedDuplexServer) StreamRequest(Duplex_StreamRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequest not implemented")
}

func RegisterDuplexServer(s *grpc.Server, srv DuplexServer) {
	s.RegisterService(&_Duplex_serviceDesc, srv)
}

func _Duplex_StreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DuplexServer).StreamRequest(&duplexStreamRequestServer{stream})
}

type Duplex_StreamRequestServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type duplexStreamRequestServer struct {
	grpc.ServerStream
}

func (x *duplexStreamRequestServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *duplexStreamRequestServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Duplex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.Duplex",
	HandlerType: (*DuplexServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRequest",
			Handler:       _Duplex_StreamRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "com.proto",
}

// AckNakServiceClient is the client API for AckNakService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AckNakServiceClient interface {
	Healthy(ctx context.Context, in *AckNak, opts ...grpc.CallOption) (*AckNak, error)
}

type ackNakServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAckNakServiceClient(cc grpc.ClientConnInterface) AckNakServiceClient {
	return &ackNakServiceClient{cc}
}

func (c *ackNakServiceClient) Healthy(ctx context.Context, in *AckNak, opts ...grpc.CallOption) (*AckNak, error) {
	out := new(AckNak)
	err := c.cc.Invoke(ctx, "/com.AckNakService/Healthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AckNakServiceServer is the server API for AckNakService service.
type AckNakServiceServer interface {
	Healthy(context.Context, *AckNak) (*AckNak, error)
}

// UnimplementedAckNakServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAckNakServiceServer struct {
}

func (*UnimplementedAckNakServiceServer) Healthy(context.Context, *AckNak) (*AckNak, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthy not implemented")
}

func RegisterAckNakServiceServer(s *grpc.Server, srv AckNakServiceServer) {
	s.RegisterService(&_AckNakService_serviceDesc, srv)
}

func _AckNakService_Healthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckNak)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AckNakServiceServer).Healthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.AckNakService/Healthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AckNakServiceServer).Healthy(ctx, req.(*AckNak))
	}
	return interceptor(ctx, in, info, handler)
}

var _AckNakService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.AckNakService",
	HandlerType: (*AckNakServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthy",
			Handler:    _AckNakService_Healthy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com.proto",
}
